<?xml version="1.0"?>
<!--
  Created by user on 2015/8/20.
  派发连接服务和邀请的信息
-->
<s:HGroup
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:chat="com.gxuwz.rctrlm.views.chat.*"
        creationComplete="initComp()">

<fx:Script>
  <![CDATA[
  //  import com.gxuwz.rctrlm.events.ConServerBarEvent;
  //  import com.gxuwz.rctrlm.events.EventDispatcherFactory;
  //  import com.gxuwz.rctrlm.presenter.ConServerBarPresenter;
  import com.gxuwz.rctrlm.events.ConServerBarEvent;
  import com.gxuwz.rctrlm.events.EventDispatcherFactory;
  import com.gxuwz.rctrlm.presenter.ConServerBarPresenter;

  import mx.core.FlexGlobals;

  import mx.managers.PopUpManager;

  import spark.components.Alert;

  // login/registration states

  public const loginNotConnected:String = "LoginNotConnected";
  public const loginConnecting:String = "LoginConnecting";
  public const loginConnected:String = "LoginConnected";
  public const loginDisconnecting:String = "LoginDisconnecting";

  // call states, only used when LoginConnected
  public const callReady:String = "CallReady";
  public const callCalling:String = "CallCalling";
  public const callRinging:String = "CallRinging";
  public const callEstablished:String = "CallEstablished";
  public const callFailed:String = "CallFailed";

  private const _Invite:String = "Invite";
  private const _Accept:String = "Accept";
  private const _Reject:String = "Reject";

  private var conServerBarPresenter:ConServerBarPresenter;


  [Bindable]
  private var _cameraName:String;

  /*************      listenEvent form connection         *************/
  [Bindable]
  private var _remoteUser:String;
  [Bindable]
  private var _netConnection:NetConnection;
  [Bindable]
  private var _netStream:NetConnection;

  [Bindable]private var _ringerChooseBool:Boolean;
  private var ringer:Sound;
  private var ringerChannel:SoundChannel;
  public function get ringerChooseBool():Boolean
  {
    return _ringerChooseBool;
  }

  public function set ringerChooseBool(value:Boolean):void
  {
    _ringerChooseBool = value;
    if(_ringerChooseBool){
      ring();
    }else{
      stopRing();
    }
  }

  private function ring():void
  {
    ringer = new Sound();

    ringer.addEventListener("sampleData", ringTone);
    ringerChannel = ringer.play();
  }

  private function stopRing():void
  {
    if (ringerChannel)
    {
      ringerChannel.stop();

      ringer.removeEventListener("sampleData", ringTone);

      ringer = null;
      ringerChannel = null;
    }
  }

  private function ringTone(event:SampleDataEvent):void
  {
    for (var c:int=0; c<8192; c++)
    {
      var pos:Number = Number(c + event.position) / Number(6 * 44100);
      var frac:Number = pos - int(pos);
      var sample:Number;
      if (frac < 0.066)
      {
        sample = 0.4 * Math.sin(2* Math.PI / (44100/784) * (Number(c + event.position)));
      }
      else if (frac < 0.333)
      {
        sample = 0.2 * (Math.sin(2* Math.PI / (44100/646) * (Number(c + event.position)))
                + Math.sin(2* Math.PI / (44100/672) * (Number(c + event.position)))
                + Math.sin(2* Math.PI / (44100/1034) * (Number(c + event.position)))
                + Math.sin(2* Math.PI / (44100/1060) * (Number(c + event.position))));
      }
      else
      {
        sample = 0;
      }
      event.data.writeFloat(sample);
      event.data.writeFloat(sample);
    }
  }


  /**********      init listenEvent       ******************/
  public function get remoteUser():String {
      return _remoteUser;
  }

  public function set remoteUser(value:String):void {
      _remoteUser = value;
  }

  public function get netConnection():NetConnection {
      return _netConnection;
  }

  public function set netConnection(value:NetConnection):void {
      _netConnection = value;
  }
  public function get netStream():NetConnection {
      return _netStream;
  }

  public function set netStream(value:NetConnection):void {
      _netStream = value;
  }

  //获取摄像头
  public function get cameraName():String {
    return _cameraName;
  }

  public function set cameraName(value:String):void {
    _cameraName = value;
  }


  public function initComp():void {
    conServerBarPresenter = new ConServerBarPresenter(this); //为模块注册对象
  }

  /**
   * 用户点击“连接”按钮，将会执行一下功能：
   * 1.派发事件UserNameSaveEvent，将输入的用户名存储到共享数据localSO中；
   * 2.创建一个 NetConnection 对象，并为将来连接到这个对象的对象创建一个Object对象及其方法。调用 connect() 方法以建立连接。
   */
  private function onConnect():void {
    trace("dispatch conserver event");
    var event:ConServerBarEvent = new ConServerBarEvent(ConServerBarEvent.TRY_CONNECT_SERVER_EVENT);//尝试连连服务
    event.connectURL = serverAddrInput.text;
    event.userName = userNameInput.text;
    EventDispatcherFactory.getEventDispatcher().dispatchEvent(event);
  }

  /**
   * 用户点击“取消”按钮，派发事件OnHangupEvent,将会执行一下功能：
   *
   * 1.清除 idManager和netConnection对象
   * 2.本身回到LoginNotConnected状态
   * 3.断开服务
   */
  private function onDisconnect():void {
    trace("Disconnecting.\n");
    var event:ConServerBarEvent = new ConServerBarEvent(ConServerBarEvent.TRY_DISCONNECT_SERVER_EVENT);//尝试断开连接
    EventDispatcherFactory.getEventDispatcher().dispatchEvent(event);
  }

  /**
   * 用户点击“呼叫”按钮，派发事件onCallEvent,将会执行一下功能：
   * 1.判断输入的呼叫用户名是否为空，如为空提示用户。
   * 2.在交换PeerID服务器对象 idManager查找输入的用户名是否已经注册。
   */
  private function onCall():void {
    if (userNameInput.text != calleeInput.text) {
      var event:ConServerBarEvent = new ConServerBarEvent(ConServerBarEvent.TRY_CALLUSER_EVENT);//尝试呼叫远程用户
      event.remoteUser = calleeInput.text;
      event.action = _Invite;
      EventDispatcherFactory.getEventDispatcher().dispatchEvent(event);
    } else {
      Alert.show("不必呼叫自己！");
    }

  }

  /**
   * 用户点击“正在呼叫中的取消”按钮，“已经建立连接”按钮，“呼叫失败”按钮，
   * 都派发事件onCancelEvent,
   */
  private function onCancel():void {
    // dispatchEvent(new Event("onCancelEvent"));
    var event:ConServerBarEvent = new ConServerBarEvent(ConServerBarEvent.TRY_CANCEL_CALLUSER_EVENT);//尝试断开远程连接
    //event.data=calleeInput.text;
    EventDispatcherFactory.getEventDispatcher().dispatchEvent(event);
  }

  private function videoQualityChanged(e:Event = null):void {
//    var camera:Camera = Camera.getCamera(_cameraName);
//    if (camera) {
//      camera.setQuality(0, videoQualitySlider.value);
//      trace("Setting camera quality to: " + videoQualitySlider.value + "\n");
//    }
  }

  protected function chat_clickHandler(event:MouseEvent):void {
    // TODO Auto-generated method stub
    dispatchEvent(new Event("onChatEvent"));
  }

  private function onInviteExcept():void {

  }

  ]]>
</fx:Script>

  <s:states>
    <s:State name="LoginNotConnected"/>
    <s:State name="LoginConnecting"/>
    <s:State name="LoginConnected"/>
    <s:State name="LoginDisconnecting"/>
    <s:State name="CallReady"/>
    <s:State name="CallCalling"/>
    <s:State name="CallRinging"/>
    <s:State name="CallEstablished"/>
    <s:State name="CallFailed"/>
  </s:states>

  <!-- Login pane -->
  <s:HGroup includeIn="LoginNotConnected" verticalAlign="middle"  paddingLeft="2" paddingRight="2" width="80%">
    <s:Label text="连接地址" toolTip="请输入连接地址"/>
    <s:TextInput id="serverAddrInput" text="rtmp://Server Address:ServerPort/Service" width="100%" />
    <s:Label  text="用户名"  toolTip="请输入用户名"/>
    <s:TextInput id="userNameInput" width="160" text="User Name" enter="{userNameInput.text.length > 0?onConnect():setFocus()}"/>
    <s:Button label="连接"  id="conButton" click="onConnect()" enabled="{userNameInput.text.length > 0}"/>
    <s:Button label="断开服务" click="onDisconnect()" />
  </s:HGroup>

  <!-- Login Connecting pane -->
  <s:HGroup includeIn="LoginConnecting" verticalAlign="middle">
    <s:Label text="连接到 {userNameInput.text}" />
    <s:Button label="取消" click="onDisconnect()" />

  </s:HGroup>

  <s:HGroup includeIn="LoginConnected, CallReady, CallCalling, CallRinging, CallEstablished, CallFailed" verticalAlign="middle">
    <s:Label text="Connected as {userNameInput.text}"
             text.CallCalling="连接为 {userNameInput.text}"
             text.CallEstablished="连接为 {userNameInput.text}"
             text.CallFailed="连接为 {userNameInput.text}"
             text.CallReady="连接为 {userNameInput.text}"
             text.CallRinging="连接为{userNameInput.text}"
             text.LoginConnected="连接为 {userNameInput.text}"/>
    <s:Button label="DISCONNECT" click="onDisconnect()"
              label.CallCalling="断开连接"
              label.CallEstablished="断开连接"
              label.CallFailed="断开连接"
              label.CallReady="断开连接"
              label.CallRinging="断开连接"
              label.LoginConnected="断开连接"/>

      <chat:Chat  remoteUser="{_remoteUser}" netConnection="{_netConnection}"/>
  </s:HGroup>

  <!--Login Disconnecting pane -->
  <s:HGroup includeIn="LoginDisconnecting">
    <s:Label text="Disconnecting from " />
  </s:HGroup>

  <!--Call Ready pane -->
  <s:HGroup includeIn="CallReady" verticalAlign="middle">
    <s:TextInput id="calleeInput" enter="onCall()"/>
    <s:Button label="呼叫"  click="onCall()"  enabled="{calleeInput.text.length > 0}"/>
  </s:HGroup>

  <!--Call Calling pane -->
  <s:HGroup includeIn="CallCalling" verticalAlign="middle">
    <s:Label text="呼叫{calleeInput.text}中" />
    <s:Button label="取消" click="onCancel()"/>
  </s:HGroup>

  <!--Call Established pane -->
  <s:HGroup includeIn="CallEstablished" verticalAlign="middle">
    <s:Label text="Called  {calleeInput.text}"  />
    <s:Button label="挂断" click="onCancel()"/>
    <s:Label id="callTimerText" width="25"/>
  </s:HGroup>

  <s:HGroup includeIn="CallFailed" verticalAlign="middle">
    <s:Label text="呼叫 {calleeInput.text}错误" />
    <s:Button label="挂断" click="onCancel()"/>
  </s:HGroup>

  <s:Button id="chat" includeIn="CallEstablished" label="交流" click="chat_clickHandler(event)"/>
  <!--<s:Label includeIn="CallEstablished" text="质量调整"/>-->
  <!--<s:HSlider id="videoQualitySlider"-->
             <!--includeIn="CallEstablished"-->
             <!--width="100%" showDataTip="false"-->
             <!--minimum="1" maximum="100" value="80"-->
             <!--change="videoQualityChanged(event)"/>-->
</s:HGroup>
