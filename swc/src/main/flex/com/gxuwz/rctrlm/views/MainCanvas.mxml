<?xml version="1.0"?>
<!--
  Created by xjzx on 2015/7/25.
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:videoCtrl="com.gxuwz.rctrlm.views.videoCtrl.*"
          xmlns:conserverbar="com.gxuwz.rctrlm.views.conServerBar.*"
          xmlns:chat="com.gxuwz.rctrlm.views.chat.*"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
          initialize="initializeHandler()">

    <!-- 专家端程序  -->
    <fx:Script><![CDATA[
        import com.gxuwz.rctrlm.events.ConServerBarEvent;
        import com.gxuwz.rctrlm.events.EventDispatcherFactory;
        import com.gxuwz.rctrlm.events.UserAddEvent;
        import com.gxuwz.rctrlm.model.Services;

        import mx.collections.ArrayCollection;

        import mx.core.SoundAsset;

        import mx.effects.SoundEffect;
        import mx.events.CloseEvent;

        import spark.components.Alert;

        //        [Bindable] private var _netConnection:NetConnection;
        //        [Bindable] private var _netStream:NetStream;
        [Bindable]
        private var _msgString:String;
        [Bindable]
        private var _remoteUser:String;
        [Bindable]
        private var _playOff:Boolean = false;//连接视频流服务
        [Bindable]
        private var netConn:NetConnection;
        [Bindable]
        private var netStr:NetStream;
        [Bindable]
        private var userList:ArrayCollection;
        [Bindable]
        private var timer:Timer;
        [Bindable]
        private var otherUser:String;
        private function initializeHandler():void {
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(ConServerBarEvent.PLAY_VIDEO_EVENT,
                    relayCallEvent, false, 0, true);
            //add connection to service user
            EventDispatcherFactory.getEventDispatcher()
                    .addEventListener(UserAddEvent.USER_CONNECTION_WITH_SERVICE,
                    userConnectWithServiceEventHandler);
            userList = new ArrayCollection();
        }


        /**
         * reply the remote caller
         * @param evt
         */
        private function relayCallEvent(evt:ConServerBarEvent):void {
            trace(evt.remoteUser + "from  remoteUser")
            _remoteUser = evt.remoteUser;
            if (evt.action == "Invite") {
                csBar.ringerChooseBool = true;
                Alert.show(_remoteUser + "邀请您远程控制\n是否同意？", "提示", Alert.YES | Alert.NO, this, alertHandler);
            } else if (evt.action == "Reject") {
                Alert.show("对方已经断开远程!\n若要恢复，请重新让对方邀请");
                csBar.currentState = csBar.loginConnected;
                _playOff = false;
                csBar.ringerChooseBool = false;
            } else if (evt.action == "Disconnect") {
                _playOff = false;
                netConn.close();
                netConn = null;
                csBar.currentState = csBar.loginNotConnected;
            } else if (evt.action == "HasUser") {
                netConn.call("callUser", null, otherUser, "Disconnect");
                Alert.show("重名登记,用户已经存在","禁止");
            }
        }

        public function alertHandler(event:CloseEvent):void {

            if (event.detail == Alert.YES) {
                //the video will be publish
                csBar.currentState = csBar.callEstablished;
                csBar.ringerChooseBool = false;
                _playOff = true;
                imgVideoCtrl.enabled = true;
                netConn.call("callUser", null, _remoteUser, "Accept");
            }
            else {
                netConn.call("callUser", null, _remoteUser, "Reject");
                csBar.currentState = csBar.loginConnected;
                _playOff = false;
            }
        }

        /**
         * connection to server
         * @param event
         */
        private function csBar_ConnectToServerEventHandler(event:MouseEvent):void {
            netConn = new NetConnection();
            netConn.client = new Services();
            netConn.addEventListener(NetStatusEvent.NET_STATUS, netConnectionStatusHandler);
            try {
                netConn.connect(csBar.serverAddrInput.text); //连接网络
                csBar.currentState = csBar.loginConnecting;
            } catch (e:Error) {
                Alert.show("连接服务失败", "提示");
            }
        }

        /**
         * 1. connect to server success ,the user login
         * 2. if connect success ,the csBar currentstatus will be change
         * @param e
         */
        private function netConnectionStatusHandler(e:NetStatusEvent):void {
            var netStatus:String = e.info.code as String;
            switch (netStatus) {
                case "NetConnection.Connect.Success":
                    netConn.call("onIdentification", new Responder(onStatus,onResult), csBar.userNameInput.text);
                    break;
                case "NetConnection.Connect.Closed":
                    Alert.show("连接关闭", "提示");
                    csBar.currentState = csBar.loginNotConnected; //状态改变
                    if (netConn) {
                        netConn.close();
                        netConn = null;
                    }
                    break;
                case "NetConnection.Connect.Failed":
                    Alert.show("连接失败", "提示");
                    if (netConn) {
                        netConn.close();
                        netConn = null;
                    }
                    csBar.currentState = csBar.loginNotConnected; //状态改变
                    break;
            }
        }
        /**
         *
         * @param status
         */
        private function onStatus(status:Object):void {
            trace(status.toString());
            if(status.toString()=="Agree"){
                csBar.currentState=csBar.loginConnected;
            }else if(status.toString()=="Reject"){
                if(netConn){
                    netConn.close();
                    netConn=null;
                }
                csBar.currentState=csBar.loginNotConnected;
                Alert.show("该用户名已经被注册，请改用户名登录\n谢谢！","提示");
            }
        }

        private function onResult(response:Object):void {
            trace(response.toString()); // displays "Hello François-Marie Arouet"
        }

        //check  and add user
        private function userConnectWithServiceEventHandler(evt:UserAddEvent):void {
            trace(evt.action + " from connection");
            if (evt.action == "connection") {
                trace("here " + (evt.user).toString() + "(csBar.userNameInput.text).toString()" + (csBar.userNameInput.text).toString());
                if ((evt.user).toString() != (csBar.userNameInput.text).toString()) {
                    if(userList.contains(evt.user)){
                        otherUser=evt.user as String;
                        trace(otherUser+"other user in MainCanvas");
                        netConn.call("callUser", null, otherUser, "HasUser");
                    }else{
                        userList.addItem(evt.user);
                    }
                }
                trace(userList + " userList from service");
                csBar.currentState = csBar.loginConnected; //状态改变

            } else {
                var index:int = userList.getItemIndex(evt.user);
                if (index > -1)
                    userList.removeItemAt(index);
            }
            trace(userList + " user in mainCanvas");
        }

        /**
         *
         * @param event
         */
        private function csBar_DisconnectToServerEventHandler(event:MouseEvent):void {
            netConn.call("callUser", null, _remoteUser, "Disconnect");
            csBar.currentState = csBar.loginNotConnected;
            csBar.ringerChooseBool = false;
            netConn.close();
            netConn = null;
        }
        ]]>
    </fx:Script>

    <!-- 登录-->
    <conserverbar:ConServerBar id="csBar" width="100%"
                               DisconnectToServerEvent="csBar_DisconnectToServerEventHandler(event)"
                               ConnectToServerEvent="csBar_ConnectToServerEventHandler(event)"
                               remoteUser="{_remoteUser}"
                               netConnection="{netConn}" />
    <mx:VDividedBox width="100%" height="100%">
        <videoCtrl:ImgVideoCtrl id="imgVideoCtrl"
                                width="100%" height="100%"
                                netConnection="{netConn}"
                                remoteUser="{_remoteUser}"
                                localUser="{csBar.userNameInput.text}"
                                enabled="false"
                                playOff="{_playOff}"/>

    </mx:VDividedBox>

</s:VGroup>
